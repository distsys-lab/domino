// Code generated by protoc-gen-go. DO NOT EDIT.
// source: fastpaxos.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	fastpaxos.proto

It has these top-level messages:
	Operation
	ProposeRequest
	ProposeReply
	PromiseRequest
	PromiseReply
	AcceptRequest
	AcceptReply
	CommitRequest
	CommitReply
	TestRequest
	TestReply
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Operation struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Key  string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Val  string `protobuf:"bytes,4,opt,name=val" json:"val,omitempty"`
}

func (m *Operation) Reset()                    { *m = Operation{} }
func (m *Operation) String() string            { return proto.CompactTextString(m) }
func (*Operation) ProtoMessage()               {}
func (*Operation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Operation) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Operation) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Operation) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Operation) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type ProposeRequest struct {
	Op        *Operation `protobuf:"bytes,1,opt,name=op" json:"op,omitempty"`
	Delay     int64      `protobuf:"varint,2,opt,name=delay" json:"delay,omitempty"`
	Timestamp int64      `protobuf:"varint,3,opt,name=timestamp" json:"timestamp,omitempty"`
	ClientId  string     `protobuf:"bytes,4,opt,name=clientId" json:"clientId,omitempty"`
}

func (m *ProposeRequest) Reset()                    { *m = ProposeRequest{} }
func (m *ProposeRequest) String() string            { return proto.CompactTextString(m) }
func (*ProposeRequest) ProtoMessage()               {}
func (*ProposeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProposeRequest) GetOp() *Operation {
	if m != nil {
		return m.Op
	}
	return nil
}

func (m *ProposeRequest) GetDelay() int64 {
	if m != nil {
		return m.Delay
	}
	return 0
}

func (m *ProposeRequest) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *ProposeRequest) GetClientId() string {
	if m != nil {
		return m.ClientId
	}
	return ""
}

type ProposeReply struct {
	OpId   string `protobuf:"bytes,1,opt,name=opId" json:"opId,omitempty"`
	Idx    string `protobuf:"bytes,2,opt,name=idx" json:"idx,omitempty"`
	IsSlow bool   `protobuf:"varint,3,opt,name=isSlow" json:"isSlow,omitempty"`
}

func (m *ProposeReply) Reset()                    { *m = ProposeReply{} }
func (m *ProposeReply) String() string            { return proto.CompactTextString(m) }
func (*ProposeReply) ProtoMessage()               {}
func (*ProposeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ProposeReply) GetOpId() string {
	if m != nil {
		return m.OpId
	}
	return ""
}

func (m *ProposeReply) GetIdx() string {
	if m != nil {
		return m.Idx
	}
	return ""
}

func (m *ProposeReply) GetIsSlow() bool {
	if m != nil {
		return m.IsSlow
	}
	return false
}

type PromiseRequest struct {
	Idx string     `protobuf:"bytes,1,opt,name=idx" json:"idx,omitempty"`
	Op  *Operation `protobuf:"bytes,2,opt,name=op" json:"op,omitempty"`
}

func (m *PromiseRequest) Reset()                    { *m = PromiseRequest{} }
func (m *PromiseRequest) String() string            { return proto.CompactTextString(m) }
func (*PromiseRequest) ProtoMessage()               {}
func (*PromiseRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PromiseRequest) GetIdx() string {
	if m != nil {
		return m.Idx
	}
	return ""
}

func (m *PromiseRequest) GetOp() *Operation {
	if m != nil {
		return m.Op
	}
	return nil
}

type PromiseReply struct {
}

func (m *PromiseReply) Reset()                    { *m = PromiseReply{} }
func (m *PromiseReply) String() string            { return proto.CompactTextString(m) }
func (*PromiseReply) ProtoMessage()               {}
func (*PromiseReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type AcceptRequest struct {
	Idx string     `protobuf:"bytes,1,opt,name=idx" json:"idx,omitempty"`
	Op  *Operation `protobuf:"bytes,2,opt,name=op" json:"op,omitempty"`
}

func (m *AcceptRequest) Reset()                    { *m = AcceptRequest{} }
func (m *AcceptRequest) String() string            { return proto.CompactTextString(m) }
func (*AcceptRequest) ProtoMessage()               {}
func (*AcceptRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *AcceptRequest) GetIdx() string {
	if m != nil {
		return m.Idx
	}
	return ""
}

func (m *AcceptRequest) GetOp() *Operation {
	if m != nil {
		return m.Op
	}
	return nil
}

type AcceptReply struct {
}

func (m *AcceptReply) Reset()                    { *m = AcceptReply{} }
func (m *AcceptReply) String() string            { return proto.CompactTextString(m) }
func (*AcceptReply) ProtoMessage()               {}
func (*AcceptReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type CommitRequest struct {
	Idx string     `protobuf:"bytes,1,opt,name=idx" json:"idx,omitempty"`
	Op  *Operation `protobuf:"bytes,2,opt,name=op" json:"op,omitempty"`
}

func (m *CommitRequest) Reset()                    { *m = CommitRequest{} }
func (m *CommitRequest) String() string            { return proto.CompactTextString(m) }
func (*CommitRequest) ProtoMessage()               {}
func (*CommitRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CommitRequest) GetIdx() string {
	if m != nil {
		return m.Idx
	}
	return ""
}

func (m *CommitRequest) GetOp() *Operation {
	if m != nil {
		return m.Op
	}
	return nil
}

type CommitReply struct {
}

func (m *CommitReply) Reset()                    { *m = CommitReply{} }
func (m *CommitReply) String() string            { return proto.CompactTextString(m) }
func (*CommitReply) ProtoMessage()               {}
func (*CommitReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type TestRequest struct {
}

func (m *TestRequest) Reset()                    { *m = TestRequest{} }
func (m *TestRequest) String() string            { return proto.CompactTextString(m) }
func (*TestRequest) ProtoMessage()               {}
func (*TestRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type TestReply struct {
}

func (m *TestReply) Reset()                    { *m = TestReply{} }
func (m *TestReply) String() string            { return proto.CompactTextString(m) }
func (*TestReply) ProtoMessage()               {}
func (*TestReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*Operation)(nil), "rpc.Operation")
	proto.RegisterType((*ProposeRequest)(nil), "rpc.ProposeRequest")
	proto.RegisterType((*ProposeReply)(nil), "rpc.ProposeReply")
	proto.RegisterType((*PromiseRequest)(nil), "rpc.PromiseRequest")
	proto.RegisterType((*PromiseReply)(nil), "rpc.PromiseReply")
	proto.RegisterType((*AcceptRequest)(nil), "rpc.AcceptRequest")
	proto.RegisterType((*AcceptReply)(nil), "rpc.AcceptReply")
	proto.RegisterType((*CommitRequest)(nil), "rpc.CommitRequest")
	proto.RegisterType((*CommitReply)(nil), "rpc.CommitReply")
	proto.RegisterType((*TestRequest)(nil), "rpc.TestRequest")
	proto.RegisterType((*TestReply)(nil), "rpc.TestReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FastPaxosRpc service

type FastPaxosRpcClient interface {
	// RPCs for clients to propose a request
	Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (FastPaxosRpc_ProposeClient, error)
	StreamPropose(ctx context.Context, opts ...grpc.CallOption) (FastPaxosRpc_StreamProposeClient, error)
	// RPCs for followers to notify the leader about its accepted requests
	Promise(ctx context.Context, in *PromiseRequest, opts ...grpc.CallOption) (*PromiseReply, error)
	// RPCs for a leader to notify followers to accept a request (for solving conflicts)
	Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptReply, error)
	// RPCs for the leaders to notify followers to commit requests in the log
	Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error)
	// RPCs for testing
	Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error)
}

type fastPaxosRpcClient struct {
	cc *grpc.ClientConn
}

func NewFastPaxosRpcClient(cc *grpc.ClientConn) FastPaxosRpcClient {
	return &fastPaxosRpcClient{cc}
}

func (c *fastPaxosRpcClient) Propose(ctx context.Context, in *ProposeRequest, opts ...grpc.CallOption) (FastPaxosRpc_ProposeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FastPaxosRpc_serviceDesc.Streams[0], c.cc, "/rpc.FastPaxosRpc/Propose", opts...)
	if err != nil {
		return nil, err
	}
	x := &fastPaxosRpcProposeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FastPaxosRpc_ProposeClient interface {
	Recv() (*ProposeReply, error)
	grpc.ClientStream
}

type fastPaxosRpcProposeClient struct {
	grpc.ClientStream
}

func (x *fastPaxosRpcProposeClient) Recv() (*ProposeReply, error) {
	m := new(ProposeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fastPaxosRpcClient) StreamPropose(ctx context.Context, opts ...grpc.CallOption) (FastPaxosRpc_StreamProposeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FastPaxosRpc_serviceDesc.Streams[1], c.cc, "/rpc.FastPaxosRpc/StreamPropose", opts...)
	if err != nil {
		return nil, err
	}
	x := &fastPaxosRpcStreamProposeClient{stream}
	return x, nil
}

type FastPaxosRpc_StreamProposeClient interface {
	Send(*ProposeRequest) error
	Recv() (*ProposeReply, error)
	grpc.ClientStream
}

type fastPaxosRpcStreamProposeClient struct {
	grpc.ClientStream
}

func (x *fastPaxosRpcStreamProposeClient) Send(m *ProposeRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fastPaxosRpcStreamProposeClient) Recv() (*ProposeReply, error) {
	m := new(ProposeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fastPaxosRpcClient) Promise(ctx context.Context, in *PromiseRequest, opts ...grpc.CallOption) (*PromiseReply, error) {
	out := new(PromiseReply)
	err := grpc.Invoke(ctx, "/rpc.FastPaxosRpc/Promise", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastPaxosRpcClient) Accept(ctx context.Context, in *AcceptRequest, opts ...grpc.CallOption) (*AcceptReply, error) {
	out := new(AcceptReply)
	err := grpc.Invoke(ctx, "/rpc.FastPaxosRpc/Accept", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastPaxosRpcClient) Commit(ctx context.Context, in *CommitRequest, opts ...grpc.CallOption) (*CommitReply, error) {
	out := new(CommitReply)
	err := grpc.Invoke(ctx, "/rpc.FastPaxosRpc/Commit", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fastPaxosRpcClient) Test(ctx context.Context, in *TestRequest, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := grpc.Invoke(ctx, "/rpc.FastPaxosRpc/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for FastPaxosRpc service

type FastPaxosRpcServer interface {
	// RPCs for clients to propose a request
	Propose(*ProposeRequest, FastPaxosRpc_ProposeServer) error
	StreamPropose(FastPaxosRpc_StreamProposeServer) error
	// RPCs for followers to notify the leader about its accepted requests
	Promise(context.Context, *PromiseRequest) (*PromiseReply, error)
	// RPCs for a leader to notify followers to accept a request (for solving conflicts)
	Accept(context.Context, *AcceptRequest) (*AcceptReply, error)
	// RPCs for the leaders to notify followers to commit requests in the log
	Commit(context.Context, *CommitRequest) (*CommitReply, error)
	// RPCs for testing
	Test(context.Context, *TestRequest) (*TestReply, error)
}

func RegisterFastPaxosRpcServer(s *grpc.Server, srv FastPaxosRpcServer) {
	s.RegisterService(&_FastPaxosRpc_serviceDesc, srv)
}

func _FastPaxosRpc_Propose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProposeRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FastPaxosRpcServer).Propose(m, &fastPaxosRpcProposeServer{stream})
}

type FastPaxosRpc_ProposeServer interface {
	Send(*ProposeReply) error
	grpc.ServerStream
}

type fastPaxosRpcProposeServer struct {
	grpc.ServerStream
}

func (x *fastPaxosRpcProposeServer) Send(m *ProposeReply) error {
	return x.ServerStream.SendMsg(m)
}

func _FastPaxosRpc_StreamPropose_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FastPaxosRpcServer).StreamPropose(&fastPaxosRpcStreamProposeServer{stream})
}

type FastPaxosRpc_StreamProposeServer interface {
	Send(*ProposeReply) error
	Recv() (*ProposeRequest, error)
	grpc.ServerStream
}

type fastPaxosRpcStreamProposeServer struct {
	grpc.ServerStream
}

func (x *fastPaxosRpcStreamProposeServer) Send(m *ProposeReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fastPaxosRpcStreamProposeServer) Recv() (*ProposeRequest, error) {
	m := new(ProposeRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _FastPaxosRpc_Promise_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PromiseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastPaxosRpcServer).Promise(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.FastPaxosRpc/Promise",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastPaxosRpcServer).Promise(ctx, req.(*PromiseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastPaxosRpc_Accept_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AcceptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastPaxosRpcServer).Accept(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.FastPaxosRpc/Accept",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastPaxosRpcServer).Accept(ctx, req.(*AcceptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastPaxosRpc_Commit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastPaxosRpcServer).Commit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.FastPaxosRpc/Commit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastPaxosRpcServer).Commit(ctx, req.(*CommitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FastPaxosRpc_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FastPaxosRpcServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.FastPaxosRpc/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FastPaxosRpcServer).Test(ctx, req.(*TestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _FastPaxosRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.FastPaxosRpc",
	HandlerType: (*FastPaxosRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Promise",
			Handler:    _FastPaxosRpc_Promise_Handler,
		},
		{
			MethodName: "Accept",
			Handler:    _FastPaxosRpc_Accept_Handler,
		},
		{
			MethodName: "Commit",
			Handler:    _FastPaxosRpc_Commit_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _FastPaxosRpc_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Propose",
			Handler:       _FastPaxosRpc_Propose_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "StreamPropose",
			Handler:       _FastPaxosRpc_StreamPropose_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "fastpaxos.proto",
}

func init() { proto.RegisterFile("fastpaxos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 417 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0x8d, 0xed, 0x10, 0x9a, 0x49, 0x63, 0xca, 0x80, 0x50, 0x14, 0x21, 0x84, 0x7c, 0xaa, 0x38,
	0x44, 0x51, 0x2b, 0x8e, 0x1c, 0x0a, 0x12, 0x52, 0x25, 0x24, 0x2a, 0xa7, 0x7f, 0x60, 0xb1, 0x17,
	0x69, 0xc5, 0xba, 0x3b, 0x78, 0x97, 0x12, 0xdf, 0xf8, 0x7b, 0xfc, 0x2b, 0xb4, 0xe3, 0xf5, 0xd7,
	0x81, 0x03, 0xf4, 0x36, 0xf3, 0xd6, 0xef, 0xcd, 0xbe, 0x37, 0x6b, 0x78, 0xf2, 0x55, 0x58, 0x47,
	0xe2, 0x68, 0xec, 0x8e, 0x6a, 0xe3, 0x0c, 0x26, 0x35, 0x15, 0xd9, 0x01, 0x96, 0x9f, 0x49, 0xd6,
	0xc2, 0x29, 0x73, 0x87, 0x29, 0xc4, 0xaa, 0xdc, 0x44, 0xaf, 0xa3, 0xf3, 0x65, 0x1e, 0xab, 0x12,
	0x11, 0xe6, 0xae, 0x21, 0xb9, 0x89, 0x19, 0xe1, 0x1a, 0xcf, 0x20, 0xf9, 0x26, 0x9b, 0x4d, 0xc2,
	0x90, 0x2f, 0x3d, 0x72, 0x2f, 0xf4, 0x66, 0xde, 0x22, 0xf7, 0x42, 0x67, 0xbf, 0x22, 0x48, 0x6f,
	0x6a, 0x43, 0xc6, 0xca, 0x5c, 0x7e, 0xff, 0x21, 0xad, 0xc3, 0x57, 0x10, 0x1b, 0x62, 0xe9, 0xd5,
	0x45, 0xba, 0xab, 0xa9, 0xd8, 0xf5, 0x63, 0xf3, 0xd8, 0x10, 0x3e, 0x87, 0x47, 0xa5, 0xd4, 0xa2,
	0xe1, 0x59, 0x49, 0xde, 0x36, 0xf8, 0x12, 0x96, 0x4e, 0x55, 0xd2, 0x3a, 0x51, 0x11, 0x8f, 0x4c,
	0xf2, 0x01, 0xc0, 0x2d, 0x9c, 0x14, 0x5a, 0xc9, 0x3b, 0x77, 0x5d, 0x86, 0xe9, 0x7d, 0x9f, 0x7d,
	0x82, 0xd3, 0xfe, 0x06, 0xa4, 0x1b, 0x6f, 0xc5, 0xd0, 0x75, 0x67, 0x8e, 0x6b, 0x7f, 0x71, 0x55,
	0x1e, 0x83, 0x3b, 0x5f, 0xe2, 0x0b, 0x58, 0x28, 0x7b, 0xd0, 0xe6, 0x27, 0x0f, 0x3b, 0xc9, 0x43,
	0x97, 0xbd, 0x67, 0x3f, 0x95, 0x1a, 0xfc, 0x04, 0x6e, 0x34, 0x70, 0x5b, 0x87, 0xf1, 0xdf, 0x1c,
	0x66, 0x29, 0xdf, 0xa8, 0xd5, 0x20, 0xdd, 0x64, 0x57, 0xb0, 0xbe, 0x2a, 0x0a, 0x49, 0xee, 0xff,
	0x25, 0xd7, 0xb0, 0xea, 0x24, 0x82, 0xe2, 0x07, 0x53, 0x55, 0xea, 0x61, 0x8a, 0x9d, 0x84, 0x57,
	0x5c, 0xc3, 0xea, 0x56, 0xda, 0x4e, 0x2f, 0x5b, 0xc1, 0xb2, 0x6d, 0x49, 0x37, 0x17, 0xbf, 0x63,
	0x38, 0xfd, 0x28, 0xac, 0xbb, 0xf1, 0x4f, 0x2a, 0xa7, 0x02, 0xdf, 0xc2, 0xe3, 0x10, 0x39, 0x3e,
	0x63, 0xe9, 0xe9, 0x13, 0xd8, 0x3e, 0x9d, 0x82, 0x5e, 0x7f, 0xb6, 0x8f, 0xf0, 0x1d, 0xac, 0x0f,
	0xae, 0x96, 0xa2, 0xfa, 0x67, 0xf2, 0x79, 0xb4, 0x8f, 0xf0, 0x92, 0xa7, 0xfa, 0x58, 0x07, 0xe2,
	0x68, 0x51, 0x03, 0x71, 0x48, 0x7e, 0x86, 0x7b, 0x58, 0xb4, 0xc1, 0x21, 0xf2, 0xf1, 0x64, 0x11,
	0xdb, 0xb3, 0x09, 0xd6, 0x33, 0xda, 0x60, 0x02, 0x63, 0x12, 0x74, 0x60, 0x8c, 0x93, 0x9b, 0xe1,
	0x1b, 0x98, 0xdf, 0xf2, 0x12, 0xf8, 0x6c, 0x14, 0xe3, 0x36, 0x1d, 0x21, 0xfc, 0xed, 0x97, 0x05,
	0xff, 0x91, 0x97, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xf4, 0xc8, 0x22, 0x85, 0xa4, 0x03, 0x00,
	0x00,
}
