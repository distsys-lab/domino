// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dynamicpaxos.proto

/*
Package dynamic is a generated protocol buffer package.

It is generated from these files:
	dynamicpaxos.proto

It has these top-level messages:
	Command
	Timestamp
	PaxosProposeReq
	PaxosProposeReply
	FpProposeReq
	FpProposeReply
	ProbeReq
	ProbeReply
	ProbeTimeReply
	ReplicaProbeReply
	ReplicaMsg
	EmptyReply
	TestReq
	TestReply
*/
package dynamic

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Command struct {
	Id   string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type" json:"type,omitempty"`
	Key  string `protobuf:"bytes,3,opt,name=key" json:"key,omitempty"`
	Val  string `protobuf:"bytes,4,opt,name=val" json:"val,omitempty"`
}

func (m *Command) Reset()                    { *m = Command{} }
func (m *Command) String() string            { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()               {}
func (*Command) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Command) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Command) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Command) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Command) GetVal() string {
	if m != nil {
		return m.Val
	}
	return ""
}

type Timestamp struct {
	Time  int64 `protobuf:"varint,1,opt,name=time" json:"time,omitempty"`
	Shard int32 `protobuf:"varint,2,opt,name=shard" json:"shard,omitempty"`
}

func (m *Timestamp) Reset()                    { *m = Timestamp{} }
func (m *Timestamp) String() string            { return proto.CompactTextString(m) }
func (*Timestamp) ProtoMessage()               {}
func (*Timestamp) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Timestamp) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Timestamp) GetShard() int32 {
	if m != nil {
		return m.Shard
	}
	return 0
}

type PaxosProposeReq struct {
	Cmd *Command `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
}

func (m *PaxosProposeReq) Reset()                    { *m = PaxosProposeReq{} }
func (m *PaxosProposeReq) String() string            { return proto.CompactTextString(m) }
func (*PaxosProposeReq) ProtoMessage()               {}
func (*PaxosProposeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PaxosProposeReq) GetCmd() *Command {
	if m != nil {
		return m.Cmd
	}
	return nil
}

type PaxosProposeReply struct {
	IsCommit bool   `protobuf:"varint,1,opt,name=isCommit" json:"isCommit,omitempty"`
	ExecRet  string `protobuf:"bytes,2,opt,name=execRet" json:"execRet,omitempty"`
	CmdId    string `protobuf:"bytes,3,opt,name=cmdId" json:"cmdId,omitempty"`
}

func (m *PaxosProposeReply) Reset()                    { *m = PaxosProposeReply{} }
func (m *PaxosProposeReply) String() string            { return proto.CompactTextString(m) }
func (*PaxosProposeReply) ProtoMessage()               {}
func (*PaxosProposeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PaxosProposeReply) GetIsCommit() bool {
	if m != nil {
		return m.IsCommit
	}
	return false
}

func (m *PaxosProposeReply) GetExecRet() string {
	if m != nil {
		return m.ExecRet
	}
	return ""
}

func (m *PaxosProposeReply) GetCmdId() string {
	if m != nil {
		return m.CmdId
	}
	return ""
}

type FpProposeReq struct {
	Cmd         *Command   `protobuf:"bytes,1,opt,name=cmd" json:"cmd,omitempty"`
	Time        *Timestamp `protobuf:"bytes,2,opt,name=time" json:"time,omitempty"`
	IsExecReply bool       `protobuf:"varint,3,opt,name=isExecReply" json:"isExecReply,omitempty"`
}

func (m *FpProposeReq) Reset()                    { *m = FpProposeReq{} }
func (m *FpProposeReq) String() string            { return proto.CompactTextString(m) }
func (*FpProposeReq) ProtoMessage()               {}
func (*FpProposeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FpProposeReq) GetCmd() *Command {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *FpProposeReq) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *FpProposeReq) GetIsExecReply() bool {
	if m != nil {
		return m.IsExecReply
	}
	return false
}

type FpProposeReply struct {
	IsAccept bool   `protobuf:"varint,1,opt,name=isAccept" json:"isAccept,omitempty"`
	IsFast   bool   `protobuf:"varint,2,opt,name=isFast" json:"isFast,omitempty"`
	ExecRet  string `protobuf:"bytes,3,opt,name=execRet" json:"execRet,omitempty"`
	CmdId    string `protobuf:"bytes,4,opt,name=cmdId" json:"cmdId,omitempty"`
}

func (m *FpProposeReply) Reset()                    { *m = FpProposeReply{} }
func (m *FpProposeReply) String() string            { return proto.CompactTextString(m) }
func (*FpProposeReply) ProtoMessage()               {}
func (*FpProposeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *FpProposeReply) GetIsAccept() bool {
	if m != nil {
		return m.IsAccept
	}
	return false
}

func (m *FpProposeReply) GetIsFast() bool {
	if m != nil {
		return m.IsFast
	}
	return false
}

func (m *FpProposeReply) GetExecRet() string {
	if m != nil {
		return m.ExecRet
	}
	return ""
}

func (m *FpProposeReply) GetCmdId() string {
	if m != nil {
		return m.CmdId
	}
	return ""
}

type ProbeReq struct {
}

func (m *ProbeReq) Reset()                    { *m = ProbeReq{} }
func (m *ProbeReq) String() string            { return proto.CompactTextString(m) }
func (*ProbeReq) ProtoMessage()               {}
func (*ProbeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type ProbeReply struct {
	QueuingDelay int64 `protobuf:"varint,1,opt,name=queuingDelay" json:"queuingDelay,omitempty"`
	PaxosLat     int32 `protobuf:"varint,2,opt,name=paxosLat" json:"paxosLat,omitempty"`
}

func (m *ProbeReply) Reset()                    { *m = ProbeReply{} }
func (m *ProbeReply) String() string            { return proto.CompactTextString(m) }
func (*ProbeReply) ProtoMessage()               {}
func (*ProbeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProbeReply) GetQueuingDelay() int64 {
	if m != nil {
		return m.QueuingDelay
	}
	return 0
}

func (m *ProbeReply) GetPaxosLat() int32 {
	if m != nil {
		return m.PaxosLat
	}
	return 0
}

type ProbeTimeReply struct {
	ProcessTime int64 `protobuf:"varint,1,opt,name=processTime" json:"processTime,omitempty"`
	PaxosLat    int32 `protobuf:"varint,2,opt,name=paxosLat" json:"paxosLat,omitempty"`
}

func (m *ProbeTimeReply) Reset()                    { *m = ProbeTimeReply{} }
func (m *ProbeTimeReply) String() string            { return proto.CompactTextString(m) }
func (*ProbeTimeReply) ProtoMessage()               {}
func (*ProbeTimeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ProbeTimeReply) GetProcessTime() int64 {
	if m != nil {
		return m.ProcessTime
	}
	return 0
}

func (m *ProbeTimeReply) GetPaxosLat() int32 {
	if m != nil {
		return m.PaxosLat
	}
	return 0
}

type ReplicaProbeReply struct {
	QueuingDelay int64 `protobuf:"varint,1,opt,name=queuingDelay" json:"queuingDelay,omitempty"`
}

func (m *ReplicaProbeReply) Reset()                    { *m = ReplicaProbeReply{} }
func (m *ReplicaProbeReply) String() string            { return proto.CompactTextString(m) }
func (*ReplicaProbeReply) ProtoMessage()               {}
func (*ReplicaProbeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *ReplicaProbeReply) GetQueuingDelay() int64 {
	if m != nil {
		return m.QueuingDelay
	}
	return 0
}

type ReplicaMsg struct {
	Type       int32      `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	Cmd        *Command   `protobuf:"bytes,2,opt,name=cmd" json:"cmd,omitempty"`
	Time       *Timestamp `protobuf:"bytes,3,opt,name=time" json:"time,omitempty"`
	IsAccept   bool       `protobuf:"varint,4,opt,name=isAccept" json:"isAccept,omitempty"`
	NonAcceptT int64      `protobuf:"varint,5,opt,name=nonAcceptT" json:"nonAcceptT,omitempty"`
	ReplicaId  string     `protobuf:"bytes,6,opt,name=replicaId" json:"replicaId,omitempty"`
	FpExecT    *Timestamp `protobuf:"bytes,7,opt,name=fpExecT" json:"fpExecT,omitempty"`
}

func (m *ReplicaMsg) Reset()                    { *m = ReplicaMsg{} }
func (m *ReplicaMsg) String() string            { return proto.CompactTextString(m) }
func (*ReplicaMsg) ProtoMessage()               {}
func (*ReplicaMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ReplicaMsg) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ReplicaMsg) GetCmd() *Command {
	if m != nil {
		return m.Cmd
	}
	return nil
}

func (m *ReplicaMsg) GetTime() *Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *ReplicaMsg) GetIsAccept() bool {
	if m != nil {
		return m.IsAccept
	}
	return false
}

func (m *ReplicaMsg) GetNonAcceptT() int64 {
	if m != nil {
		return m.NonAcceptT
	}
	return 0
}

func (m *ReplicaMsg) GetReplicaId() string {
	if m != nil {
		return m.ReplicaId
	}
	return ""
}

func (m *ReplicaMsg) GetFpExecT() *Timestamp {
	if m != nil {
		return m.FpExecT
	}
	return nil
}

type EmptyReply struct {
}

func (m *EmptyReply) Reset()                    { *m = EmptyReply{} }
func (m *EmptyReply) String() string            { return proto.CompactTextString(m) }
func (*EmptyReply) ProtoMessage()               {}
func (*EmptyReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

type TestReq struct {
}

func (m *TestReq) Reset()                    { *m = TestReq{} }
func (m *TestReq) String() string            { return proto.CompactTextString(m) }
func (*TestReq) ProtoMessage()               {}
func (*TestReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

type TestReply struct {
}

func (m *TestReply) Reset()                    { *m = TestReply{} }
func (m *TestReply) String() string            { return proto.CompactTextString(m) }
func (*TestReply) ProtoMessage()               {}
func (*TestReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func init() {
	proto.RegisterType((*Command)(nil), "dynamic.Command")
	proto.RegisterType((*Timestamp)(nil), "dynamic.Timestamp")
	proto.RegisterType((*PaxosProposeReq)(nil), "dynamic.PaxosProposeReq")
	proto.RegisterType((*PaxosProposeReply)(nil), "dynamic.PaxosProposeReply")
	proto.RegisterType((*FpProposeReq)(nil), "dynamic.FpProposeReq")
	proto.RegisterType((*FpProposeReply)(nil), "dynamic.FpProposeReply")
	proto.RegisterType((*ProbeReq)(nil), "dynamic.ProbeReq")
	proto.RegisterType((*ProbeReply)(nil), "dynamic.ProbeReply")
	proto.RegisterType((*ProbeTimeReply)(nil), "dynamic.ProbeTimeReply")
	proto.RegisterType((*ReplicaProbeReply)(nil), "dynamic.ReplicaProbeReply")
	proto.RegisterType((*ReplicaMsg)(nil), "dynamic.ReplicaMsg")
	proto.RegisterType((*EmptyReply)(nil), "dynamic.EmptyReply")
	proto.RegisterType((*TestReq)(nil), "dynamic.TestReq")
	proto.RegisterType((*TestReply)(nil), "dynamic.TestReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DynamicPaxos service

type DynamicPaxosClient interface {
	// Multi-Paxos for clients
	PaxosPropose(ctx context.Context, in *PaxosProposeReq, opts ...grpc.CallOption) (*PaxosProposeReply, error)
	// Fast Paxos for clients
	FpPropose(ctx context.Context, in *FpProposeReq, opts ...grpc.CallOption) (DynamicPaxos_FpProposeClient, error)
	// Communication between replicas
	// Heart beat
	// Paxos Accept & Commit
	// Fast Paxos Vote
	// Fast Paxos Accept & Commit
	// Any above message should piggyback a commit timestamp message for the shard.
	// This commit timestamp indicates that the replica guarantees that it will
	// not accept/commit any operation before the timestamp
	DeliverReplicaMsg(ctx context.Context, opts ...grpc.CallOption) (DynamicPaxos_DeliverReplicaMsgClient, error)
	// // Network Latency Monitoring
	// For clients
	Probe(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeReply, error)
	ProbeTime(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeTimeReply, error)
	// For replica servers
	ReplicaProbe(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ReplicaProbeReply, error)
	// Testing
	Test(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestReply, error)
}

type dynamicPaxosClient struct {
	cc *grpc.ClientConn
}

func NewDynamicPaxosClient(cc *grpc.ClientConn) DynamicPaxosClient {
	return &dynamicPaxosClient{cc}
}

func (c *dynamicPaxosClient) PaxosPropose(ctx context.Context, in *PaxosProposeReq, opts ...grpc.CallOption) (*PaxosProposeReply, error) {
	out := new(PaxosProposeReply)
	err := grpc.Invoke(ctx, "/dynamic.DynamicPaxos/PaxosPropose", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicPaxosClient) FpPropose(ctx context.Context, in *FpProposeReq, opts ...grpc.CallOption) (DynamicPaxos_FpProposeClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DynamicPaxos_serviceDesc.Streams[0], c.cc, "/dynamic.DynamicPaxos/FpPropose", opts...)
	if err != nil {
		return nil, err
	}
	x := &dynamicPaxosFpProposeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DynamicPaxos_FpProposeClient interface {
	Recv() (*FpProposeReply, error)
	grpc.ClientStream
}

type dynamicPaxosFpProposeClient struct {
	grpc.ClientStream
}

func (x *dynamicPaxosFpProposeClient) Recv() (*FpProposeReply, error) {
	m := new(FpProposeReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dynamicPaxosClient) DeliverReplicaMsg(ctx context.Context, opts ...grpc.CallOption) (DynamicPaxos_DeliverReplicaMsgClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_DynamicPaxos_serviceDesc.Streams[1], c.cc, "/dynamic.DynamicPaxos/DeliverReplicaMsg", opts...)
	if err != nil {
		return nil, err
	}
	x := &dynamicPaxosDeliverReplicaMsgClient{stream}
	return x, nil
}

type DynamicPaxos_DeliverReplicaMsgClient interface {
	Send(*ReplicaMsg) error
	CloseAndRecv() (*EmptyReply, error)
	grpc.ClientStream
}

type dynamicPaxosDeliverReplicaMsgClient struct {
	grpc.ClientStream
}

func (x *dynamicPaxosDeliverReplicaMsgClient) Send(m *ReplicaMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *dynamicPaxosDeliverReplicaMsgClient) CloseAndRecv() (*EmptyReply, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(EmptyReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *dynamicPaxosClient) Probe(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeReply, error) {
	out := new(ProbeReply)
	err := grpc.Invoke(ctx, "/dynamic.DynamicPaxos/Probe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicPaxosClient) ProbeTime(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeTimeReply, error) {
	out := new(ProbeTimeReply)
	err := grpc.Invoke(ctx, "/dynamic.DynamicPaxos/ProbeTime", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicPaxosClient) ReplicaProbe(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ReplicaProbeReply, error) {
	out := new(ReplicaProbeReply)
	err := grpc.Invoke(ctx, "/dynamic.DynamicPaxos/ReplicaProbe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dynamicPaxosClient) Test(ctx context.Context, in *TestReq, opts ...grpc.CallOption) (*TestReply, error) {
	out := new(TestReply)
	err := grpc.Invoke(ctx, "/dynamic.DynamicPaxos/Test", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DynamicPaxos service

type DynamicPaxosServer interface {
	// Multi-Paxos for clients
	PaxosPropose(context.Context, *PaxosProposeReq) (*PaxosProposeReply, error)
	// Fast Paxos for clients
	FpPropose(*FpProposeReq, DynamicPaxos_FpProposeServer) error
	// Communication between replicas
	// Heart beat
	// Paxos Accept & Commit
	// Fast Paxos Vote
	// Fast Paxos Accept & Commit
	// Any above message should piggyback a commit timestamp message for the shard.
	// This commit timestamp indicates that the replica guarantees that it will
	// not accept/commit any operation before the timestamp
	DeliverReplicaMsg(DynamicPaxos_DeliverReplicaMsgServer) error
	// // Network Latency Monitoring
	// For clients
	Probe(context.Context, *ProbeReq) (*ProbeReply, error)
	ProbeTime(context.Context, *ProbeReq) (*ProbeTimeReply, error)
	// For replica servers
	ReplicaProbe(context.Context, *ProbeReq) (*ReplicaProbeReply, error)
	// Testing
	Test(context.Context, *TestReq) (*TestReply, error)
}

func RegisterDynamicPaxosServer(s *grpc.Server, srv DynamicPaxosServer) {
	s.RegisterService(&_DynamicPaxos_serviceDesc, srv)
}

func _DynamicPaxos_PaxosPropose_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PaxosProposeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicPaxosServer).PaxosPropose(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamic.DynamicPaxos/PaxosPropose",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicPaxosServer).PaxosPropose(ctx, req.(*PaxosProposeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicPaxos_FpPropose_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FpProposeReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DynamicPaxosServer).FpPropose(m, &dynamicPaxosFpProposeServer{stream})
}

type DynamicPaxos_FpProposeServer interface {
	Send(*FpProposeReply) error
	grpc.ServerStream
}

type dynamicPaxosFpProposeServer struct {
	grpc.ServerStream
}

func (x *dynamicPaxosFpProposeServer) Send(m *FpProposeReply) error {
	return x.ServerStream.SendMsg(m)
}

func _DynamicPaxos_DeliverReplicaMsg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DynamicPaxosServer).DeliverReplicaMsg(&dynamicPaxosDeliverReplicaMsgServer{stream})
}

type DynamicPaxos_DeliverReplicaMsgServer interface {
	SendAndClose(*EmptyReply) error
	Recv() (*ReplicaMsg, error)
	grpc.ServerStream
}

type dynamicPaxosDeliverReplicaMsgServer struct {
	grpc.ServerStream
}

func (x *dynamicPaxosDeliverReplicaMsgServer) SendAndClose(m *EmptyReply) error {
	return x.ServerStream.SendMsg(m)
}

func (x *dynamicPaxosDeliverReplicaMsgServer) Recv() (*ReplicaMsg, error) {
	m := new(ReplicaMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _DynamicPaxos_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicPaxosServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamic.DynamicPaxos/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicPaxosServer).Probe(ctx, req.(*ProbeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicPaxos_ProbeTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicPaxosServer).ProbeTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamic.DynamicPaxos/ProbeTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicPaxosServer).ProbeTime(ctx, req.(*ProbeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicPaxos_ReplicaProbe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicPaxosServer).ReplicaProbe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamic.DynamicPaxos/ReplicaProbe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicPaxosServer).ReplicaProbe(ctx, req.(*ProbeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _DynamicPaxos_Test_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DynamicPaxosServer).Test(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dynamic.DynamicPaxos/Test",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DynamicPaxosServer).Test(ctx, req.(*TestReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _DynamicPaxos_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dynamic.DynamicPaxos",
	HandlerType: (*DynamicPaxosServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PaxosPropose",
			Handler:    _DynamicPaxos_PaxosPropose_Handler,
		},
		{
			MethodName: "Probe",
			Handler:    _DynamicPaxos_Probe_Handler,
		},
		{
			MethodName: "ProbeTime",
			Handler:    _DynamicPaxos_ProbeTime_Handler,
		},
		{
			MethodName: "ReplicaProbe",
			Handler:    _DynamicPaxos_ReplicaProbe_Handler,
		},
		{
			MethodName: "Test",
			Handler:    _DynamicPaxos_Test_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FpPropose",
			Handler:       _DynamicPaxos_FpPropose_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DeliverReplicaMsg",
			Handler:       _DynamicPaxos_DeliverReplicaMsg_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "dynamicpaxos.proto",
}

func init() { proto.RegisterFile("dynamicpaxos.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 604 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0x5d, 0x6b, 0xd4, 0x40,
	0x14, 0x6d, 0x36, 0xbb, 0xcd, 0xe6, 0x6e, 0xa8, 0xdd, 0xeb, 0x47, 0x43, 0x10, 0x29, 0xf3, 0x20,
	0x7d, 0x90, 0x45, 0x2b, 0x45, 0x7c, 0x92, 0x62, 0x5b, 0x28, 0x54, 0xa9, 0x61, 0xdf, 0x25, 0x4d,
	0xc6, 0x3a, 0x98, 0x6c, 0xa6, 0x99, 0xb4, 0x34, 0xe0, 0x1f, 0xf3, 0x7f, 0xf9, 0x03, 0x64, 0x3e,
	0x3a, 0x99, 0x5d, 0xba, 0x6a, 0xdf, 0xe6, 0x9e, 0xcc, 0xbd, 0x73, 0xce, 0x9c, 0x33, 0x01, 0x2c,
	0xba, 0x45, 0x56, 0xb1, 0x9c, 0x67, 0xb7, 0xb5, 0x98, 0xf1, 0xa6, 0x6e, 0x6b, 0x0c, 0x0c, 0x46,
	0xbe, 0x40, 0xf0, 0xb1, 0xae, 0xaa, 0x6c, 0x51, 0xe0, 0x16, 0x0c, 0x58, 0x11, 0x7b, 0xbb, 0xde,
	0x5e, 0x98, 0x0e, 0x58, 0x81, 0x08, 0xc3, 0xb6, 0xe3, 0x34, 0x1e, 0x28, 0x44, 0xad, 0x71, 0x1b,
	0xfc, 0x1f, 0xb4, 0x8b, 0x7d, 0x05, 0xc9, 0xa5, 0x44, 0x6e, 0xb2, 0x32, 0x1e, 0x6a, 0xe4, 0x26,
	0x2b, 0xc9, 0x01, 0x84, 0x73, 0x56, 0x51, 0xd1, 0x66, 0x15, 0x57, 0x43, 0x58, 0x45, 0xd5, 0x58,
	0x3f, 0x55, 0x6b, 0x7c, 0x02, 0x23, 0xf1, 0x3d, 0x6b, 0x0a, 0x35, 0x79, 0x94, 0xea, 0x82, 0x1c,
	0xc0, 0xa3, 0x73, 0xc9, 0xf0, 0xbc, 0xa9, 0x79, 0x2d, 0x68, 0x4a, 0xaf, 0x90, 0x80, 0x9f, 0x57,
	0x9a, 0xd2, 0x64, 0x7f, 0x7b, 0x66, 0x38, 0xcf, 0x0c, 0xe1, 0x54, 0x7e, 0x24, 0x5f, 0x61, 0xba,
	0xdc, 0xc6, 0xcb, 0x0e, 0x13, 0x18, 0x33, 0x21, 0xb7, 0xb1, 0x56, 0x75, 0x8f, 0x53, 0x5b, 0x63,
	0x0c, 0x01, 0xbd, 0xa5, 0x79, 0x4a, 0x5b, 0xa3, 0xec, 0xae, 0x94, 0xbc, 0xf2, 0xaa, 0x38, 0x2d,
	0x8c, 0x3c, 0x5d, 0x90, 0x9f, 0x10, 0x9d, 0xf0, 0x87, 0x91, 0xc2, 0x97, 0x46, 0xf5, 0x40, 0x6d,
	0x42, 0xbb, 0xc9, 0xde, 0x8b, 0xb9, 0x89, 0x5d, 0x98, 0x30, 0x71, 0xac, 0x8e, 0xe7, 0xa5, 0xbe,
	0xd6, 0x71, 0xea, 0x42, 0xa4, 0x85, 0x2d, 0xe7, 0x74, 0xab, 0xed, 0x30, 0xcf, 0x29, 0x77, 0xb4,
	0xe9, 0x1a, 0x9f, 0xc1, 0x26, 0x13, 0x27, 0x99, 0xd0, 0xd2, 0xc6, 0xa9, 0xa9, 0x5c, 0xcd, 0xfe,
	0x1a, 0xcd, 0x43, 0x57, 0x33, 0xc0, 0xf8, 0xbc, 0xa9, 0x2f, 0xa4, 0x5e, 0x72, 0x06, 0x60, 0xd6,
	0xf2, 0x74, 0x02, 0xd1, 0xd5, 0x35, 0xbd, 0x66, 0x8b, 0xcb, 0x23, 0x5a, 0x66, 0x9d, 0xf1, 0x75,
	0x09, 0x93, 0x0c, 0x55, 0xd6, 0xce, 0xb2, 0xd6, 0x58, 0x6c, 0x6b, 0xf2, 0x19, 0xb6, 0xd4, 0x34,
	0x79, 0x13, 0x7a, 0xe2, 0x2e, 0x4c, 0x78, 0x53, 0xe7, 0x54, 0x88, 0x79, 0x1f, 0x14, 0x17, 0xfa,
	0xeb, 0xbc, 0x77, 0x30, 0x95, 0x63, 0x58, 0x9e, 0x3d, 0x8c, 0x24, 0xf9, 0xed, 0x01, 0x98, 0xce,
	0x4f, 0xe2, 0xd2, 0x86, 0xdd, 0x53, 0xf3, 0x75, 0xd8, 0x8d, 0xd3, 0x83, 0xff, 0x71, 0xda, 0xff,
	0x87, 0xd3, 0xae, 0x6b, 0xc3, 0x15, 0xd7, 0x5e, 0x00, 0x2c, 0xea, 0x85, 0x2e, 0xe6, 0xf1, 0x48,
	0x91, 0x75, 0x10, 0x7c, 0x0e, 0x61, 0xa3, 0x99, 0x9e, 0x16, 0xf1, 0xa6, 0xf2, 0xa9, 0x07, 0xf0,
	0x15, 0x04, 0xdf, 0xb8, 0x0c, 0xcc, 0x3c, 0x0e, 0xd6, 0x92, 0xb8, 0xdb, 0x42, 0x22, 0x80, 0xe3,
	0x8a, 0xb7, 0x9d, 0x4e, 0x57, 0x08, 0xc1, 0x9c, 0x8a, 0x56, 0xda, 0x3c, 0x81, 0x50, 0x2f, 0x79,
	0xd9, 0xed, 0xff, 0xf2, 0x21, 0x3a, 0xd2, 0x43, 0xd4, 0xe3, 0xc2, 0x13, 0x88, 0xdc, 0x57, 0x86,
	0xb1, 0x3d, 0x63, 0xe5, 0xcd, 0x26, 0xc9, 0x9a, 0x2f, 0xf2, 0xb8, 0x0d, 0xfc, 0x00, 0xa1, 0x8d,
	0x33, 0x3e, 0xb5, 0x5b, 0xdd, 0x07, 0x96, 0xec, 0xdc, 0x07, 0xab, 0xf6, 0xd7, 0x1e, 0x1e, 0xc2,
	0xf4, 0x88, 0x96, 0xec, 0x86, 0x36, 0x8e, 0x79, 0x8f, 0x6d, 0x47, 0x0f, 0x26, 0x3d, 0xe8, 0x08,
	0xde, 0xd8, 0xf3, 0xf0, 0x0d, 0x8c, 0x54, 0x56, 0x70, 0xda, 0x53, 0x35, 0x61, 0x77, 0x9a, 0xfa,
	0x38, 0x91, 0x0d, 0x7c, 0x0f, 0xa1, 0x4d, 0xed, 0x7d, 0x6d, 0x3b, 0xcb, 0x90, 0x0d, 0xb7, 0x52,
	0x1c, 0xb9, 0x01, 0xbd, 0xaf, 0x3b, 0x59, 0xa5, 0xbf, 0x74, 0xf6, 0x0c, 0x86, 0xd2, 0x18, 0xec,
	0x03, 0x68, 0x2c, 0x4b, 0x70, 0x05, 0x51, 0xfb, 0x2f, 0x36, 0xd5, 0x1f, 0xfe, 0xed, 0x9f, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xfb, 0x83, 0xfb, 0x2d, 0xf7, 0x05, 0x00, 0x00,
}
