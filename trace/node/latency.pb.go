// Code generated by protoc-gen-go. DO NOT EDIT.
// source: latency.proto

/*
Package node is a generated protocol buffer package.

It is generated from these files:
	latency.proto

It has these top-level messages:
	ProbeReq
	ProbeReply
*/
package node

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ProbeReq struct {
}

func (m *ProbeReq) Reset()                    { *m = ProbeReq{} }
func (m *ProbeReq) String() string            { return proto.CompactTextString(m) }
func (*ProbeReq) ProtoMessage()               {}
func (*ProbeReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type ProbeReply struct {
	ServerClock int64 `protobuf:"varint,1,opt,name=serverClock" json:"serverClock,omitempty"`
}

func (m *ProbeReply) Reset()                    { *m = ProbeReply{} }
func (m *ProbeReply) String() string            { return proto.CompactTextString(m) }
func (*ProbeReply) ProtoMessage()               {}
func (*ProbeReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ProbeReply) GetServerClock() int64 {
	if m != nil {
		return m.ServerClock
	}
	return 0
}

func init() {
	proto.RegisterType((*ProbeReq)(nil), "node.ProbeReq")
	proto.RegisterType((*ProbeReply)(nil), "node.ProbeReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Latency service

type LatencyClient interface {
	Probe(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeReply, error)
}

type latencyClient struct {
	cc *grpc.ClientConn
}

func NewLatencyClient(cc *grpc.ClientConn) LatencyClient {
	return &latencyClient{cc}
}

func (c *latencyClient) Probe(ctx context.Context, in *ProbeReq, opts ...grpc.CallOption) (*ProbeReply, error) {
	out := new(ProbeReply)
	err := grpc.Invoke(ctx, "/node.Latency/Probe", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Latency service

type LatencyServer interface {
	Probe(context.Context, *ProbeReq) (*ProbeReply, error)
}

func RegisterLatencyServer(s *grpc.Server, srv LatencyServer) {
	s.RegisterService(&_Latency_serviceDesc, srv)
}

func _Latency_Probe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProbeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LatencyServer).Probe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/node.Latency/Probe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LatencyServer).Probe(ctx, req.(*ProbeReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Latency_serviceDesc = grpc.ServiceDesc{
	ServiceName: "node.Latency",
	HandlerType: (*LatencyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Probe",
			Handler:    _Latency_Probe_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "latency.proto",
}

func init() { proto.RegisterFile("latency.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 125 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0x49, 0x2c, 0x49,
	0xcd, 0x4b, 0xae, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0xc9, 0xcb, 0x4f, 0x49, 0x55,
	0xe2, 0xe2, 0xe2, 0x08, 0x28, 0xca, 0x4f, 0x4a, 0x0d, 0x4a, 0x2d, 0x54, 0xd2, 0xe3, 0xe2, 0x82,
	0xb2, 0x0b, 0x72, 0x2a, 0x85, 0x14, 0xb8, 0xb8, 0x8b, 0x53, 0x8b, 0xca, 0x52, 0x8b, 0x9c, 0x73,
	0xf2, 0x93, 0xb3, 0x25, 0x18, 0x15, 0x18, 0x35, 0x98, 0x83, 0x90, 0x85, 0x8c, 0xcc, 0xb8, 0xd8,
	0x7d, 0x20, 0x46, 0x0a, 0x69, 0x73, 0xb1, 0x82, 0xb5, 0x0a, 0xf1, 0xe9, 0x81, 0x8c, 0xd5, 0x83,
	0x99, 0x29, 0x25, 0x80, 0xc2, 0x2f, 0xc8, 0xa9, 0x54, 0x62, 0x48, 0x62, 0x03, 0x3b, 0xc0, 0x18,
	0x10, 0x00, 0x00, 0xff, 0xff, 0xa3, 0x81, 0x1b, 0xb8, 0x91, 0x00, 0x00, 0x00,
}
